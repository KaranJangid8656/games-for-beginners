import random

class SudokuGenerator:
    """
    Generates a 9x9 solvable Sudoku puzzle.
    """
    def __init__(self):
        # Initialize an empty 9x9 grid
        self.grid = [[0] * 9 for _ in range(9)]

    def _is_safe(self, row, col, num):
        """Checks if it's safe to place 'num' at self.grid[row][col]"""
        
        # Check row
        if num in self.grid[row]:
            return False
            
        # Check column
        for r in range(9):
            if self.grid[r][col] == num:
                return False
                
        # Check 3x3 box
        start_row, start_col = row - row % 3, col - col % 3
        for r in range(3):
            for c in range(3):
                if self.grid[start_row + r][start_col + c] == num:
                    return False
                    
        return True

    def _fill_grid(self):
        """Recursively fills the entire grid using backtracking."""
        for i in range(81):
            row, col = i // 9, i % 9
            
            # If the cell is already filled, continue
            if self.grid[row][col] != 0:
                continue

            # Try placing numbers from 1 to 9
            numbers = list(range(1, 10))
            random.shuffle(numbers) # Randomize to get different puzzles
            
            for num in numbers:
                if self._is_safe(row, col, num):
                    self.grid[row][col] = num
                    
                    # Recursively try to fill the rest of the grid
                    if self._fill_grid():
                        return True
                        
                    # Backtrack: if the rest of the grid can't be filled, reset and try next number
                    self.grid[row][col] = 0
                    
            # If no number works in this cell, backtrack to the previous cell
            return False 

        # If the loop finishes (all cells are filled), the grid is complete
        return True

    def generate_puzzle(self, holes_to_remove=40):
        """
        Generates a complete grid and then removes numbers to create the puzzle.
        Returns the puzzle grid.
        """
        # 1. Generate a complete, solved grid
        self._fill_grid()
        solved_grid = [row[:] for row in self.grid] # Deep copy

        # 2. Remove numbers (create 'holes')
        cells = [(r, c) for r in range(9) for c in range(9)]
        random.shuffle(cells)
        
        puzzle_grid = [row[:] for row in self.grid] # Start with the solved grid
        
        for r, c in cells:
            if holes_to_remove <= 0:
                break
                
            original_value = puzzle_grid[r][c]
            puzzle_grid[r][c] = 0 # Remove the number

            # *In a robust generator, you'd check for a unique solution here.*
            # For simplicity, we just rely on removing a fixed number of holes.
            holes_to_remove -= 1
            
        self.grid = puzzle_grid
        return puzzle_grid, solved_grid

    def print_grid(self, grid=None):
        """Prints the Sudoku grid in a nice format."""
        if grid is None:
            grid = self.grid
            
        print("\n+-------+-------+-------+")
        for r in range(9):
            row_str = "| "
            for c in range(9):
                value = str(grid[r][c]) if grid[r][c] != 0 else "."
                row_str += value + " "
                if (c + 1) % 3 == 0 and c != 8:
                    row_str += "| "
            row_str += "|"
            print(row_str)
            if (r + 1) % 3 == 0 and r != 8:
                print("+-------+-------+-------+")
        print("+-------+-------+-------+")

# --- Main Execution ---
if __name__ == "__main__":
    game = SudokuGenerator()
    
    # Generate the puzzle, removing about 40 numbers for a medium difficulty
    puzzle, solved = game.generate_puzzle(holes_to_remove=40) 

    print("ðŸ§© Generated Sudoku Puzzle:")
    game.print_grid(puzzle)
    
    # Uncomment the next lines if you want to see the solution
    # print("\nâœ… Sudoku Solution:")
    # game.print_grid(solved)
